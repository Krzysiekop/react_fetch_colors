{"version":3,"sources":["store/modal-context.js","componetns/modal/Modal.js","componetns/navigation/Navigation.js","componetns/products/Product.js","componetns/products/Products.js","App.js","serviceWorker.js","index.js"],"names":["ModalContext","React","createContext","color","id","name","pantone","ModalOverlay","props","className","onClick","Modal","ctx","useContext","style","backgroundColor","year","Navigation","back","next","Product","Products","useState","productState","setProductState","isLoading","setIsLoading","isError","setError","backToListButton","setBackToListButton","modalState","setModalState","enteredId","setEnteredId","pageNumber","setPageNumber","useEffect","fetch","then","request","ok","statusText","Error","json","products","list","push","data","console","log","catch","error","message","showModal","onChange","event","preventDefault","target","value","type","placeholder","map","product","key","pantone_value","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2cfca4fe.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ModalContext = React.createContext({\r\n  color: \"\",\r\n  id: \"\",\r\n  name: \"\",\r\n  pantone: \"\",\r\n  color: \"\",\r\n  year: \"\",\r\n});\r\n\r\nexport default ModalContext;\r\n","import React, { useContext } from \"react\";\r\nimport ModalContext from \"../../store/modal-context\";\r\nimport \"./Modal.css\";\r\n\r\n\r\nconst ModalOverlay = (props) => {\r\n  return <div className=\"overlay\" onClick={props.onClick}></div>\r\n}\r\n\r\n\r\nconst Modal = (props) => {\r\n  const ctx = useContext(ModalContext);\r\n\r\n  return (\r\n    <>\r\n    <ModalOverlay onClick={props.onClick} />\r\n    <div className=\"modal\" style={{ backgroundColor: `${ctx.color}` }}>\r\n      <ul>\r\n        <li className=\"modal-item\">\r\n          <h1>{ctx.id}</h1>\r\n          <h3>{ctx.name}</h3>\r\n          <h3>{ctx.pantone}</h3>\r\n          <h3>{ctx.color}</h3>\r\n          <h3>{ctx.year}</h3>\r\n        </li>\r\n      </ul>\r\n      <button className=\"modalButton\" onClick={props.onClick}>X</button>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport './Navigation.css'\r\n\r\nconst Navigation = (props) => {\r\n  return (\r\n    <div className=\"nav\">\r\n      <button className=\"button\" onClick={props.back}>\r\n        Back Page\r\n      </button>\r\n      <button className=\"button\" onClick={props.next}>\r\n        Next Page\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { useContext } from \"react\";\r\nimport ModalContext from \"../../store/modal-context\";\r\n\r\nimport \"./product.css\";\r\n\r\nconst Product = (props) => {\r\n  const ctx = useContext(ModalContext);\r\n\r\n  const manageModal = () => {\r\n    ctx.color = props.color;\r\n    ctx.id = props.id;\r\n    ctx.name = props.name;\r\n    ctx.pantone = props.pantone;\r\n    ctx.year = props.year;\r\n    props.onClick();\r\n  };\r\n\r\n  return (\r\n    <li\r\n      onClick={manageModal}\r\n      style={{ backgroundColor: `${props.color}` }}\r\n      className=\"product-item\"\r\n    >\r\n      <h1>{props.id}</h1>\r\n      <h3>{props.name}</h3>\r\n      <h3>{props.pantone}</h3>\r\n      <h3>{props.color}</h3>\r\n      <h3>{props.year}</h3>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Modal from \"../modal/Modal\";\r\nimport Navigation from \"../navigation/Navigation\";\r\n\r\nimport Product from \"./Product\";\r\n\r\nconst Products = () => {\r\n  const [productState, setProductState] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setError] = useState(false);\r\n  const [backToListButton, setBackToListButton] = useState(false);\r\n\r\n  const [modalState, setModalState] = useState(false);\r\n  const [enteredId, setEnteredId] = useState(\"\");\r\n\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n\r\n  const fetchProducts = () => {\r\n    setIsLoading(true);\r\n    setError(false);\r\n    setBackToListButton(false);\r\n    if (enteredId) {\r\n      fetch(`https://reqres.in/api/products/${enteredId}`)\r\n        .then((request) => {\r\n          if (!request.ok) {\r\n            setError(request.statusText);\r\n            setBackToListButton(true);\r\n            throw new Error(request.statusText);\r\n          }\r\n          setBackToListButton(true);\r\n          return request.json();\r\n        })\r\n        .then((products) => {\r\n          let list = [];\r\n          list.push(products.data);\r\n          setProductState(list);\r\n          setIsLoading(false);\r\n          console.log(list);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\r\n            \"There has been a problem with your fetch operation:\",\r\n            error.message\r\n          );\r\n        });\r\n    } else {\r\n      fetch(`https://reqres.in/api/products?per_page=5&page=${pageNumber}`)\r\n        .then((request) => {\r\n          if (!request.ok) {\r\n            setError(request.statusText);\r\n            setBackToListButton(true);\r\n            throw new Error(request.statusText);\r\n          }\r\n          return request.json();\r\n        })\r\n        .then((products) => {\r\n          setProductState(products.data);\r\n          setIsLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\r\n            \"There has been a problem with your fetch operation:\",\r\n            error.message\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  const nextPage = () => {\r\n    if (pageNumber < 3) {\r\n      setPageNumber(pageNumber + 1);\r\n    }\r\n  };\r\n\r\n  const backPage = () => {\r\n    if (pageNumber > 1) {\r\n      setPageNumber(pageNumber - 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchProducts();\r\n  }, [pageNumber, enteredId]);\r\n\r\n  const showModal = () => {\r\n    setModalState(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalState(false);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    setEnteredId(event.target.value);\r\n  };\r\n\r\n  const backToList = () =>{\r\n    setEnteredId(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      {modalState && <Modal onClick={closeModal} />}\r\n\r\n      <section className=\"imput-section\">\r\n        <input\r\n          onChange={submitHandler}\r\n          value={enteredId}\r\n          type={\"number\"}\r\n          placeholder=\"Type id\"\r\n        />\r\n      </section>\r\n\r\n      <section>\r\n        <ul className=\"product-list\">\r\n          {!isLoading && productState\r\n            ? productState.map((product) => (\r\n                <Product\r\n                  key={product.id}\r\n                  name={product.name}\r\n                  id={product.id}\r\n                  year={product.year}\r\n                  pantone={product.pantone_value}\r\n                  color={product.color}\r\n                  onClick={showModal}\r\n                />\r\n              ))\r\n            : null}\r\n          {isLoading && !isError && (\r\n            <p className=\"loading-message\">Loading ...</p>\r\n          )}\r\n          {isError && <p className=\"error-message\">{isError}</p>}\r\n        </ul>\r\n      </section>\r\n\r\n      {backToListButton ? (\r\n        <div className=\"nav\">\r\n          <button className=\"button\" onClick={backToList}>Back to list</button>\r\n        </div>\r\n      ) : (\r\n        <Navigation next={nextPage} back={backPage} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Products;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Products from \"./componetns/products/Products\";\nimport ModalContext from \"./store/modal-context\";\n\nfunction App() {\n  return (\n    <div>\n      <ModalContext.Provider\n        value={{\n          color: \"\",\n          id: \"\",\n          name: \"\",\n          pantone: \"\",\n          color: \"\",\n          year: \"\",\n        }}\n      >\n        <Products></Products>\n      </ModalContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}